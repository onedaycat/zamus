// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import dlq "github.com/onedaycat/zamus/dlq"
import errors "github.com/onedaycat/errors"
import mock "github.com/stretchr/testify/mock"

// DLQ is an autogenerated mock type for the DLQ type
type DLQ struct {
	mock.Mock
}

// AddError provides a mock function with given fields: appErr
func (_m *DLQ) AddError(appErr errors.Error) {
	_m.Called(appErr)
}

// GetDLQErrors provides a mock function with given fields:
func (_m *DLQ) GetDLQErrors() []*dlq.DLQError {
	ret := _m.Called()

	var r0 []*dlq.DLQError
	if rf, ok := ret.Get(0).(func() []*dlq.DLQError); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dlq.DLQError)
		}
	}

	return r0
}

// Retry provides a mock function with given fields:
func (_m *DLQ) Retry() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Save provides a mock function with given fields: ctx, data
func (_m *DLQ) Save(ctx context.Context, data []byte) errors.Error {
	ret := _m.Called(ctx, data)

	var r0 errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) errors.Error); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.Error)
		}
	}

	return r0
}
