// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import ddd "github.com/onedaycat/zamus/ddd"
import errors "github.com/onedaycat/errors"

import mock "github.com/stretchr/testify/mock"
import proto "github.com/gogo/protobuf/proto"

// EventStore is an autogenerated mock type for the EventStore type
type EventStore struct {
	mock.Mock
}

// PublishEvents provides a mock function with given fields: ctx, evts
func (_m *EventStore) PublishEvents(ctx context.Context, evts ...proto.Message) errors.Error {
	_va := make([]interface{}, len(evts))
	for _i := range evts {
		_va[_i] = evts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, ...proto.Message) errors.Error); ok {
		r0 = rf(ctx, evts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.Error)
		}
	}

	return r0
}

// Save provides a mock function with given fields: ctx, agg
func (_m *EventStore) Save(ctx context.Context, agg ddd.AggregateRoot) errors.Error {
	ret := _m.Called(ctx, agg)

	var r0 errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, ddd.AggregateRoot) errors.Error); ok {
		r0 = rf(ctx, agg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.Error)
		}
	}

	return r0
}
