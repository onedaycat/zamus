// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import eventstore "github.com/onedaycat/zamus/eventstore"
import mock "github.com/stretchr/testify/mock"

// EventStore is an autogenerated mock type for the EventStore type
type EventStore struct {
	mock.Mock
}

// GetAggregate provides a mock function with given fields: aggID, agg
func (_m *EventStore) GetAggregate(aggID string, agg eventstore.AggregateRoot) error {
	ret := _m.Called(aggID, agg)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, eventstore.AggregateRoot) error); ok {
		r0 = rf(aggID, agg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEvents provides a mock function with given fields: aggID, seq, agg
func (_m *EventStore) GetEvents(aggID string, seq int64, agg eventstore.AggregateRoot) ([]*eventstore.EventMsg, error) {
	ret := _m.Called(aggID, seq, agg)

	var r0 []*eventstore.EventMsg
	if rf, ok := ret.Get(0).(func(string, int64, eventstore.AggregateRoot) []*eventstore.EventMsg); ok {
		r0 = rf(aggID, seq, agg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*eventstore.EventMsg)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64, eventstore.AggregateRoot) error); ok {
		r1 = rf(aggID, seq, agg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: agg, options
func (_m *EventStore) Save(agg eventstore.AggregateRoot, options ...eventstore.SaveOption) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, agg)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(eventstore.AggregateRoot, ...eventstore.SaveOption) error); ok {
		r0 = rf(agg, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetEventLimit provides a mock function with given fields: limit
func (_m *EventStore) SetEventLimit(limit int64) {
	_m.Called(limit)
}
