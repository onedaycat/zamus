// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eventstore.proto

package eventstore

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type EventMsg struct {
	EventID              string            `protobuf:"bytes,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	EventType            string            `protobuf:"bytes,2,opt,name=eventType,proto3" json:"eventType,omitempty"`
	EventVersion         string            `protobuf:"bytes,3,opt,name=eventVersion,proto3" json:"eventVersion,omitempty"`
	AggregateID          string            `protobuf:"bytes,4,opt,name=aggregateID,proto3" json:"aggregateID,omitempty"`
	Event                []byte            `protobuf:"bytes,5,opt,name=event,proto3" json:"event,omitempty"`
	Time                 int64             `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
	Seq                  int64             `protobuf:"varint,7,opt,name=seq,proto3" json:"seq,omitempty"`
	Expired              int64             `protobuf:"varint,8,opt,name=expired,proto3" json:"expired,omitempty"`
	Metadata             map[string]string `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *EventMsg) Reset()         { *m = EventMsg{} }
func (m *EventMsg) String() string { return proto.CompactTextString(m) }
func (*EventMsg) ProtoMessage()    {}
func (*EventMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_00783576c07562d6, []int{0}
}
func (m *EventMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMsg.Merge(m, src)
}
func (m *EventMsg) XXX_Size() int {
	return m.Size()
}
func (m *EventMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMsg.DiscardUnknown(m)
}

var xxx_messageInfo_EventMsg proto.InternalMessageInfo

func (m *EventMsg) GetEventID() string {
	if m != nil {
		return m.EventID
	}
	return ""
}

func (m *EventMsg) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *EventMsg) GetEventVersion() string {
	if m != nil {
		return m.EventVersion
	}
	return ""
}

func (m *EventMsg) GetAggregateID() string {
	if m != nil {
		return m.AggregateID
	}
	return ""
}

func (m *EventMsg) GetEvent() []byte {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *EventMsg) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *EventMsg) GetSeq() int64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *EventMsg) GetExpired() int64 {
	if m != nil {
		return m.Expired
	}
	return 0
}

func (m *EventMsg) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type EventMsgList struct {
	EventMsgs            []*EventMsg `protobuf:"bytes,1,rep,name=eventMsgs,proto3" json:"eventMsgs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *EventMsgList) Reset()         { *m = EventMsgList{} }
func (m *EventMsgList) String() string { return proto.CompactTextString(m) }
func (*EventMsgList) ProtoMessage()    {}
func (*EventMsgList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00783576c07562d6, []int{1}
}
func (m *EventMsgList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMsgList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMsgList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMsgList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMsgList.Merge(m, src)
}
func (m *EventMsgList) XXX_Size() int {
	return m.Size()
}
func (m *EventMsgList) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMsgList.DiscardUnknown(m)
}

var xxx_messageInfo_EventMsgList proto.InternalMessageInfo

func (m *EventMsgList) GetEventMsgs() []*EventMsg {
	if m != nil {
		return m.EventMsgs
	}
	return nil
}

func init() {
	proto.RegisterType((*EventMsg)(nil), "zamus.eventstore.EventMsg")
	proto.RegisterMapType((map[string]string)(nil), "zamus.eventstore.EventMsg.MetadataEntry")
	proto.RegisterType((*EventMsgList)(nil), "zamus.eventstore.EventMsgList")
}

func init() { proto.RegisterFile("eventstore.proto", fileDescriptor_00783576c07562d6) }

var fileDescriptor_00783576c07562d6 = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0xcb, 0x4a, 0xc3, 0x40,
	0x14, 0x65, 0x9a, 0x3e, 0x6f, 0x2b, 0x94, 0xc1, 0xc5, 0xa5, 0x48, 0x09, 0x5d, 0x65, 0x95, 0x85,
	0x6e, 0x8a, 0xee, 0xa4, 0x05, 0x0b, 0x66, 0x13, 0xc4, 0x85, 0xbb, 0x91, 0x5e, 0x42, 0xd0, 0x3c,
	0x9c, 0x99, 0x16, 0xe3, 0x17, 0xba, 0xf4, 0x13, 0x34, 0x5f, 0x22, 0xb9, 0x4d, 0x8c, 0x15, 0xdc,
	0x9d, 0xd7, 0x65, 0x0e, 0x67, 0x60, 0x4a, 0x7b, 0x4a, 0xad, 0xb1, 0x99, 0x26, 0x3f, 0xd7, 0x99,
	0xcd, 0xe4, 0xf4, 0x4d, 0x25, 0x3b, 0xe3, 0xb7, 0xfa, 0xe2, 0xab, 0x03, 0xc3, 0x75, 0x45, 0x03,
	0x13, 0x49, 0x84, 0x01, 0x5b, 0x9b, 0x15, 0x0a, 0x57, 0x78, 0xa3, 0xb0, 0xa1, 0xf2, 0x0c, 0x46,
	0x0c, 0xef, 0x8a, 0x9c, 0xb0, 0xc3, 0x5e, 0x2b, 0xc8, 0x05, 0x4c, 0x98, 0xdc, 0x93, 0x36, 0x71,
	0x96, 0xa2, 0xc3, 0x81, 0x23, 0x4d, 0xba, 0x30, 0x56, 0x51, 0xa4, 0x29, 0x52, 0x96, 0x36, 0x2b,
	0xec, 0x72, 0xe4, 0xb7, 0x24, 0x4f, 0xa1, 0xc7, 0x17, 0xd8, 0x73, 0x85, 0x37, 0x09, 0x0f, 0x44,
	0x4a, 0xe8, 0xda, 0x38, 0x21, 0xec, 0xbb, 0xc2, 0x73, 0x42, 0xc6, 0x72, 0x0a, 0x8e, 0xa1, 0x17,
	0x1c, 0xb0, 0x54, 0x41, 0x6e, 0xfe, 0x9a, 0xc7, 0x9a, 0xb6, 0x38, 0x64, 0xb5, 0xa1, 0x72, 0x05,
	0xc3, 0x84, 0xac, 0xda, 0x2a, 0xab, 0x70, 0xe4, 0x3a, 0xde, 0xf8, 0xdc, 0xf3, 0xff, 0xae, 0xe0,
	0x37, 0x0b, 0xf8, 0x41, 0x1d, 0x5d, 0xa7, 0x56, 0x17, 0xe1, 0xcf, 0xe5, 0xec, 0x0a, 0x4e, 0x8e,
	0xac, 0xaa, 0xc2, 0x13, 0x15, 0xf5, 0x4c, 0x15, 0xac, 0xea, 0xef, 0xd5, 0xf3, 0xae, 0x99, 0xe7,
	0x40, 0x2e, 0x3b, 0x4b, 0xb1, 0xb8, 0x81, 0x49, 0xf3, 0xc0, 0x6d, 0x6c, 0xac, 0x5c, 0xd6, 0x63,
	0x06, 0x26, 0x32, 0x28, 0xb8, 0xd3, 0xec, 0xff, 0x4e, 0x61, 0x1b, 0xbe, 0xc6, 0xf7, 0x72, 0x2e,
	0x3e, 0xca, 0xb9, 0xf8, 0x2c, 0xe7, 0xe2, 0x01, 0xda, 0xf4, 0x63, 0x9f, 0x3f, 0xf8, 0xe2, 0x3b,
	0x00, 0x00, 0xff, 0xff, 0x17, 0xea, 0x37, 0xa3, 0xf4, 0x01, 0x00, 0x00,
}

func (m *EventMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EventID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEventstore(dAtA, i, uint64(len(m.EventID)))
		i += copy(dAtA[i:], m.EventID)
	}
	if len(m.EventType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEventstore(dAtA, i, uint64(len(m.EventType)))
		i += copy(dAtA[i:], m.EventType)
	}
	if len(m.EventVersion) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEventstore(dAtA, i, uint64(len(m.EventVersion)))
		i += copy(dAtA[i:], m.EventVersion)
	}
	if len(m.AggregateID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEventstore(dAtA, i, uint64(len(m.AggregateID)))
		i += copy(dAtA[i:], m.AggregateID)
	}
	if len(m.Event) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEventstore(dAtA, i, uint64(len(m.Event)))
		i += copy(dAtA[i:], m.Event)
	}
	if m.Time != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEventstore(dAtA, i, uint64(m.Time))
	}
	if m.Seq != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintEventstore(dAtA, i, uint64(m.Seq))
	}
	if m.Expired != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintEventstore(dAtA, i, uint64(m.Expired))
	}
	if len(m.Metadata) > 0 {
		for k, _ := range m.Metadata {
			dAtA[i] = 0x4a
			i++
			v := m.Metadata[k]
			mapSize := 1 + len(k) + sovEventstore(uint64(len(k))) + 1 + len(v) + sovEventstore(uint64(len(v)))
			i = encodeVarintEventstore(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintEventstore(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintEventstore(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EventMsgList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMsgList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EventMsgs) > 0 {
		for _, msg := range m.EventMsgs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEventstore(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintEventstore(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EventMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventID)
	if l > 0 {
		n += 1 + l + sovEventstore(uint64(l))
	}
	l = len(m.EventType)
	if l > 0 {
		n += 1 + l + sovEventstore(uint64(l))
	}
	l = len(m.EventVersion)
	if l > 0 {
		n += 1 + l + sovEventstore(uint64(l))
	}
	l = len(m.AggregateID)
	if l > 0 {
		n += 1 + l + sovEventstore(uint64(l))
	}
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovEventstore(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovEventstore(uint64(m.Time))
	}
	if m.Seq != 0 {
		n += 1 + sovEventstore(uint64(m.Seq))
	}
	if m.Expired != 0 {
		n += 1 + sovEventstore(uint64(m.Expired))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovEventstore(uint64(len(k))) + 1 + len(v) + sovEventstore(uint64(len(v)))
			n += mapEntrySize + 1 + sovEventstore(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventMsgList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EventMsgs) > 0 {
		for _, e := range m.EventMsgs {
			l = e.Size()
			n += 1 + l + sovEventstore(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEventstore(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEventstore(x uint64) (n int) {
	return sovEventstore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregateID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEventstore
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEventstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = append(m.Event[:0], dAtA[iNdEx:postIndex]...)
			if m.Event == nil {
				m.Event = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expired", wireType)
			}
			m.Expired = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expired |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventstore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEventstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEventstore
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEventstore
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEventstore
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthEventstore
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEventstore
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthEventstore
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthEventstore
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEventstore(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEventstore
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventstore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMsgList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMsgList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMsgList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventstore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEventstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventMsgs = append(m.EventMsgs, &EventMsg{})
			if err := m.EventMsgs[len(m.EventMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventstore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEventstore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEventstore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventstore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventstore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEventstore
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthEventstore
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEventstore
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEventstore(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthEventstore
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEventstore = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEventstore   = fmt.Errorf("proto: integer overflow")
)
