// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import errors "github.com/onedaycat/errors"
import eventstore "github.com/onedaycat/zamus/eventstore"
import mock "github.com/stretchr/testify/mock"
import projectionapplyer "github.com/onedaycat/zamus/reactor/projectionapplyer"

// ProjectionApplyer is an autogenerated mock type for the ProjectionApplyer type
type ProjectionApplyer struct {
	mock.Mock
}

// ApplyModel provides a mock function with given fields: ctx, modelKey, evt, msg
func (_m *ProjectionApplyer) ApplyModel(ctx context.Context, modelKey *projectionapplyer.ModelKey, evt interface{}, msg *eventstore.EventMsg) errors.Error {
	ret := _m.Called(ctx, modelKey, evt, msg)

	var r0 errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, *projectionapplyer.ModelKey, interface{}, *eventstore.EventMsg) errors.Error); ok {
		r0 = rf(ctx, modelKey, evt, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.Error)
		}
	}

	return r0
}

// Clear provides a mock function with given fields:
func (_m *ProjectionApplyer) Clear() {
	_m.Called()
}

// Delete provides a mock function with given fields: ctx, modelKeys
func (_m *ProjectionApplyer) Delete(ctx context.Context, modelKeys ...*projectionapplyer.ModelKey) {
	_va := make([]interface{}, len(modelKeys))
	for _i := range modelKeys {
		_va[_i] = modelKeys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// GetModel provides a mock function with given fields: ctx, modelKey
func (_m *ProjectionApplyer) GetModel(ctx context.Context, modelKey *projectionapplyer.ModelKey) (projectionapplyer.ProjectionModel, errors.Error) {
	ret := _m.Called(ctx, modelKey)

	var r0 projectionapplyer.ProjectionModel
	if rf, ok := ret.Get(0).(func(context.Context, *projectionapplyer.ModelKey) projectionapplyer.ProjectionModel); ok {
		r0 = rf(ctx, modelKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(projectionapplyer.ProjectionModel)
		}
	}

	var r1 errors.Error
	if rf, ok := ret.Get(1).(func(context.Context, *projectionapplyer.ModelKey) errors.Error); ok {
		r1 = rf(ctx, modelKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.Error)
		}
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx
func (_m *ProjectionApplyer) Save(ctx context.Context) errors.Error {
	ret := _m.Called(ctx)

	var r0 errors.Error
	if rf, ok := ret.Get(0).(func(context.Context) errors.Error); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.Error)
		}
	}

	return r0
}
