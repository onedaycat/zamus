// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: testdata.proto

package domain

import (
    fmt "fmt"
    proto "github.com/gogo/protobuf/proto"
    io "io"
    math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type StockItemCreated struct {
    Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
    ProductID            string   `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`
    Qty                  int32    `protobuf:"varint,3,opt,name=qty,proto3" json:"qty,omitempty"`
    XXX_NoUnkeyedLiteral struct{} `json:"-"`
    XXX_unrecognized     []byte   `json:"-"`
    XXX_sizecache        int32    `json:"-"`
}

func (m *StockItemCreated) Reset()         { *m = StockItemCreated{} }
func (m *StockItemCreated) String() string { return proto.CompactTextString(m) }
func (*StockItemCreated) ProtoMessage()    {}
func (*StockItemCreated) Descriptor() ([]byte, []int) {
    return fileDescriptor_40c4782d007dfce9, []int{0}
}
func (m *StockItemCreated) XXX_Unmarshal(b []byte) error {
    return m.Unmarshal(b)
}
func (m *StockItemCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
    if deterministic {
        return xxx_messageInfo_StockItemCreated.Marshal(b, m, deterministic)
    } else {
        b = b[:cap(b)]
        n, err := m.MarshalTo(b)
        if err != nil {
            return nil, err
        }
        return b[:n], nil
    }
}
func (m *StockItemCreated) XXX_Merge(src proto.Message) {
    xxx_messageInfo_StockItemCreated.Merge(m, src)
}
func (m *StockItemCreated) XXX_Size() int {
    return m.Size()
}
func (m *StockItemCreated) XXX_DiscardUnknown() {
    xxx_messageInfo_StockItemCreated.DiscardUnknown(m)
}

var xxx_messageInfo_StockItemCreated proto.InternalMessageInfo

func (m *StockItemCreated) GetId() string {
    if m != nil {
        return m.Id
    }
    return ""
}

func (m *StockItemCreated) GetProductID() string {
    if m != nil {
        return m.ProductID
    }
    return ""
}

func (m *StockItemCreated) GetQty() int32 {
    if m != nil {
        return m.Qty
    }
    return 0
}

type StockItemRemoved struct {
    ProductID            string   `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`
    RemovedAt            int64    `protobuf:"varint,2,opt,name=removedAt,proto3" json:"removedAt,omitempty"`
    XXX_NoUnkeyedLiteral struct{} `json:"-"`
    XXX_unrecognized     []byte   `json:"-"`
    XXX_sizecache        int32    `json:"-"`
}

func (m *StockItemRemoved) Reset()         { *m = StockItemRemoved{} }
func (m *StockItemRemoved) String() string { return proto.CompactTextString(m) }
func (*StockItemRemoved) ProtoMessage()    {}
func (*StockItemRemoved) Descriptor() ([]byte, []int) {
    return fileDescriptor_40c4782d007dfce9, []int{1}
}
func (m *StockItemRemoved) XXX_Unmarshal(b []byte) error {
    return m.Unmarshal(b)
}
func (m *StockItemRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
    if deterministic {
        return xxx_messageInfo_StockItemRemoved.Marshal(b, m, deterministic)
    } else {
        b = b[:cap(b)]
        n, err := m.MarshalTo(b)
        if err != nil {
            return nil, err
        }
        return b[:n], nil
    }
}
func (m *StockItemRemoved) XXX_Merge(src proto.Message) {
    xxx_messageInfo_StockItemRemoved.Merge(m, src)
}
func (m *StockItemRemoved) XXX_Size() int {
    return m.Size()
}
func (m *StockItemRemoved) XXX_DiscardUnknown() {
    xxx_messageInfo_StockItemRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_StockItemRemoved proto.InternalMessageInfo

func (m *StockItemRemoved) GetProductID() string {
    if m != nil {
        return m.ProductID
    }
    return ""
}

func (m *StockItemRemoved) GetRemovedAt() int64 {
    if m != nil {
        return m.RemovedAt
    }
    return 0
}

type StockItemUpdated struct {
    ProductID            string   `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`
    Qty                  int32    `protobuf:"varint,2,opt,name=qty,proto3" json:"qty,omitempty"`
    XXX_NoUnkeyedLiteral struct{} `json:"-"`
    XXX_unrecognized     []byte   `json:"-"`
    XXX_sizecache        int32    `json:"-"`
}

func (m *StockItemUpdated) Reset()         { *m = StockItemUpdated{} }
func (m *StockItemUpdated) String() string { return proto.CompactTextString(m) }
func (*StockItemUpdated) ProtoMessage()    {}
func (*StockItemUpdated) Descriptor() ([]byte, []int) {
    return fileDescriptor_40c4782d007dfce9, []int{2}
}
func (m *StockItemUpdated) XXX_Unmarshal(b []byte) error {
    return m.Unmarshal(b)
}
func (m *StockItemUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
    if deterministic {
        return xxx_messageInfo_StockItemUpdated.Marshal(b, m, deterministic)
    } else {
        b = b[:cap(b)]
        n, err := m.MarshalTo(b)
        if err != nil {
            return nil, err
        }
        return b[:n], nil
    }
}
func (m *StockItemUpdated) XXX_Merge(src proto.Message) {
    xxx_messageInfo_StockItemUpdated.Merge(m, src)
}
func (m *StockItemUpdated) XXX_Size() int {
    return m.Size()
}
func (m *StockItemUpdated) XXX_DiscardUnknown() {
    xxx_messageInfo_StockItemUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_StockItemUpdated proto.InternalMessageInfo

func (m *StockItemUpdated) GetProductID() string {
    if m != nil {
        return m.ProductID
    }
    return ""
}

func (m *StockItemUpdated) GetQty() int32 {
    if m != nil {
        return m.Qty
    }
    return 0
}

type StockItemUpdated2 struct {
    Qty                  int32    `protobuf:"varint,1,opt,name=qty,proto3" json:"qty,omitempty"`
    XXX_NoUnkeyedLiteral struct{} `json:"-"`
    XXX_unrecognized     []byte   `json:"-"`
    XXX_sizecache        int32    `json:"-"`
}

func (m *StockItemUpdated2) Reset()         { *m = StockItemUpdated2{} }
func (m *StockItemUpdated2) String() string { return proto.CompactTextString(m) }
func (*StockItemUpdated2) ProtoMessage()    {}
func (*StockItemUpdated2) Descriptor() ([]byte, []int) {
    return fileDescriptor_40c4782d007dfce9, []int{3}
}
func (m *StockItemUpdated2) XXX_Unmarshal(b []byte) error {
    return m.Unmarshal(b)
}
func (m *StockItemUpdated2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
    if deterministic {
        return xxx_messageInfo_StockItemUpdated2.Marshal(b, m, deterministic)
    } else {
        b = b[:cap(b)]
        n, err := m.MarshalTo(b)
        if err != nil {
            return nil, err
        }
        return b[:n], nil
    }
}
func (m *StockItemUpdated2) XXX_Merge(src proto.Message) {
    xxx_messageInfo_StockItemUpdated2.Merge(m, src)
}
func (m *StockItemUpdated2) XXX_Size() int {
    return m.Size()
}
func (m *StockItemUpdated2) XXX_DiscardUnknown() {
    xxx_messageInfo_StockItemUpdated2.DiscardUnknown(m)
}

var xxx_messageInfo_StockItemUpdated2 proto.InternalMessageInfo

func (m *StockItemUpdated2) GetQty() int32 {
    if m != nil {
        return m.Qty
    }
    return 0
}

func init() {
    proto.RegisterType((*StockItemCreated)(nil), "testdata.stock.v1.StockItemCreated")
    proto.RegisterType((*StockItemRemoved)(nil), "testdata.stock.v1.StockItemRemoved")
    proto.RegisterType((*StockItemUpdated)(nil), "testdata.stock.v1.StockItemUpdated")
    proto.RegisterType((*StockItemUpdated2)(nil), "testdata.stock.v1.StockItemUpdated2")
}

func init() { proto.RegisterFile("testdata.proto", fileDescriptor_40c4782d007dfce9) }

var fileDescriptor_40c4782d007dfce9 = []byte{
    // 207 bytes of a gzipped FileDescriptorProto
    0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x49, 0x2d, 0x2e,
    0x49, 0x49, 0x2c, 0x49, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x84, 0xf3, 0x8b, 0x4b,
    0xf2, 0x93, 0xb3, 0xf5, 0xca, 0x0c, 0x95, 0x82, 0xb8, 0x04, 0x82, 0x41, 0x6c, 0xcf, 0x92, 0xd4,
    0x5c, 0xe7, 0xa2, 0xd4, 0xc4, 0x92, 0xd4, 0x14, 0x21, 0x3e, 0x2e, 0xa6, 0xcc, 0x14, 0x09, 0x46,
    0x05, 0x46, 0x0d, 0xce, 0x20, 0xa6, 0xcc, 0x14, 0x21, 0x19, 0x2e, 0xce, 0x82, 0xa2, 0xfc, 0x94,
    0xd2, 0xe4, 0x12, 0x4f, 0x17, 0x09, 0x26, 0xb0, 0x30, 0x42, 0x40, 0x48, 0x80, 0x8b, 0xb9, 0xb0,
    0xa4, 0x52, 0x82, 0x59, 0x81, 0x51, 0x83, 0x35, 0x08, 0xc4, 0x54, 0xf2, 0x43, 0x32, 0x33, 0x28,
    0x35, 0x37, 0xbf, 0x2c, 0x15, 0xcd, 0x0c, 0x46, 0x74, 0x33, 0x64, 0xb8, 0x38, 0x8b, 0x20, 0x0a,
    0x1d, 0x4b, 0xc0, 0x36, 0x30, 0x07, 0x21, 0x04, 0x94, 0x9c, 0x90, 0xcc, 0x0b, 0x2d, 0x48, 0x01,
    0xbb, 0x11, 0xbf, 0x79, 0x50, 0x37, 0x31, 0x21, 0xdc, 0xa4, 0xca, 0x25, 0x88, 0x6e, 0x86, 0x11,
    0x4c, 0x19, 0x23, 0x5c, 0x99, 0x93, 0xc8, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e,
    0x78, 0x24, 0xc7, 0x18, 0xc5, 0x96, 0x92, 0x9f, 0x9b, 0x98, 0x99, 0x97, 0xc4, 0x06, 0x0e, 0x3e,
    0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1f, 0xba, 0xa4, 0x2d, 0x50, 0x01, 0x00, 0x00,
}

func (m *StockItemCreated) Marshal() (dAtA []byte, err error) {
    size := m.Size()
    dAtA = make([]byte, size)
    n, err := m.MarshalTo(dAtA)
    if err != nil {
        return nil, err
    }
    return dAtA[:n], nil
}

func (m *StockItemCreated) MarshalTo(dAtA []byte) (int, error) {
    var i int
    _ = i
    var l int
    _ = l
    if len(m.Id) > 0 {
        dAtA[i] = 0xa
        i++
        i = encodeVarintTestdata(dAtA, i, uint64(len(m.Id)))
        i += copy(dAtA[i:], m.Id)
    }
    if len(m.ProductID) > 0 {
        dAtA[i] = 0x12
        i++
        i = encodeVarintTestdata(dAtA, i, uint64(len(m.ProductID)))
        i += copy(dAtA[i:], m.ProductID)
    }
    if m.Qty != 0 {
        dAtA[i] = 0x18
        i++
        i = encodeVarintTestdata(dAtA, i, uint64(m.Qty))
    }
    if m.XXX_unrecognized != nil {
        i += copy(dAtA[i:], m.XXX_unrecognized)
    }
    return i, nil
}

func (m *StockItemRemoved) Marshal() (dAtA []byte, err error) {
    size := m.Size()
    dAtA = make([]byte, size)
    n, err := m.MarshalTo(dAtA)
    if err != nil {
        return nil, err
    }
    return dAtA[:n], nil
}

func (m *StockItemRemoved) MarshalTo(dAtA []byte) (int, error) {
    var i int
    _ = i
    var l int
    _ = l
    if len(m.ProductID) > 0 {
        dAtA[i] = 0xa
        i++
        i = encodeVarintTestdata(dAtA, i, uint64(len(m.ProductID)))
        i += copy(dAtA[i:], m.ProductID)
    }
    if m.RemovedAt != 0 {
        dAtA[i] = 0x10
        i++
        i = encodeVarintTestdata(dAtA, i, uint64(m.RemovedAt))
    }
    if m.XXX_unrecognized != nil {
        i += copy(dAtA[i:], m.XXX_unrecognized)
    }
    return i, nil
}

func (m *StockItemUpdated) Marshal() (dAtA []byte, err error) {
    size := m.Size()
    dAtA = make([]byte, size)
    n, err := m.MarshalTo(dAtA)
    if err != nil {
        return nil, err
    }
    return dAtA[:n], nil
}

func (m *StockItemUpdated) MarshalTo(dAtA []byte) (int, error) {
    var i int
    _ = i
    var l int
    _ = l
    if len(m.ProductID) > 0 {
        dAtA[i] = 0xa
        i++
        i = encodeVarintTestdata(dAtA, i, uint64(len(m.ProductID)))
        i += copy(dAtA[i:], m.ProductID)
    }
    if m.Qty != 0 {
        dAtA[i] = 0x10
        i++
        i = encodeVarintTestdata(dAtA, i, uint64(m.Qty))
    }
    if m.XXX_unrecognized != nil {
        i += copy(dAtA[i:], m.XXX_unrecognized)
    }
    return i, nil
}

func (m *StockItemUpdated2) Marshal() (dAtA []byte, err error) {
    size := m.Size()
    dAtA = make([]byte, size)
    n, err := m.MarshalTo(dAtA)
    if err != nil {
        return nil, err
    }
    return dAtA[:n], nil
}

func (m *StockItemUpdated2) MarshalTo(dAtA []byte) (int, error) {
    var i int
    _ = i
    var l int
    _ = l
    if m.Qty != 0 {
        dAtA[i] = 0x8
        i++
        i = encodeVarintTestdata(dAtA, i, uint64(m.Qty))
    }
    if m.XXX_unrecognized != nil {
        i += copy(dAtA[i:], m.XXX_unrecognized)
    }
    return i, nil
}

func encodeVarintTestdata(dAtA []byte, offset int, v uint64) int {
    for v >= 1<<7 {
        dAtA[offset] = uint8(v&0x7f | 0x80)
        v >>= 7
        offset++
    }
    dAtA[offset] = uint8(v)
    return offset + 1
}
func (m *StockItemCreated) Size() (n int) {
    if m == nil {
        return 0
    }
    var l int
    _ = l
    l = len(m.Id)
    if l > 0 {
        n += 1 + l + sovTestdata(uint64(l))
    }
    l = len(m.ProductID)
    if l > 0 {
        n += 1 + l + sovTestdata(uint64(l))
    }
    if m.Qty != 0 {
        n += 1 + sovTestdata(uint64(m.Qty))
    }
    if m.XXX_unrecognized != nil {
        n += len(m.XXX_unrecognized)
    }
    return n
}

func (m *StockItemRemoved) Size() (n int) {
    if m == nil {
        return 0
    }
    var l int
    _ = l
    l = len(m.ProductID)
    if l > 0 {
        n += 1 + l + sovTestdata(uint64(l))
    }
    if m.RemovedAt != 0 {
        n += 1 + sovTestdata(uint64(m.RemovedAt))
    }
    if m.XXX_unrecognized != nil {
        n += len(m.XXX_unrecognized)
    }
    return n
}

func (m *StockItemUpdated) Size() (n int) {
    if m == nil {
        return 0
    }
    var l int
    _ = l
    l = len(m.ProductID)
    if l > 0 {
        n += 1 + l + sovTestdata(uint64(l))
    }
    if m.Qty != 0 {
        n += 1 + sovTestdata(uint64(m.Qty))
    }
    if m.XXX_unrecognized != nil {
        n += len(m.XXX_unrecognized)
    }
    return n
}

func (m *StockItemUpdated2) Size() (n int) {
    if m == nil {
        return 0
    }
    var l int
    _ = l
    if m.Qty != 0 {
        n += 1 + sovTestdata(uint64(m.Qty))
    }
    if m.XXX_unrecognized != nil {
        n += len(m.XXX_unrecognized)
    }
    return n
}

func sovTestdata(x uint64) (n int) {
    for {
        n++
        x >>= 7
        if x == 0 {
            break
        }
    }
    return n
}
func sozTestdata(x uint64) (n int) {
    return sovTestdata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StockItemCreated) Unmarshal(dAtA []byte) error {
    l := len(dAtA)
    iNdEx := 0
    for iNdEx < l {
        preIndex := iNdEx
        var wire uint64
        for shift := uint(0); ; shift += 7 {
            if shift >= 64 {
                return ErrIntOverflowTestdata
            }
            if iNdEx >= l {
                return io.ErrUnexpectedEOF
            }
            b := dAtA[iNdEx]
            iNdEx++
            wire |= uint64(b&0x7F) << shift
            if b < 0x80 {
                break
            }
        }
        fieldNum := int32(wire >> 3)
        wireType := int(wire & 0x7)
        if wireType == 4 {
            return fmt.Errorf("proto: StockItemCreated: wiretype end group for non-group")
        }
        if fieldNum <= 0 {
            return fmt.Errorf("proto: StockItemCreated: illegal tag %d (wire type %d)", fieldNum, wire)
        }
        switch fieldNum {
        case 1:
            if wireType != 2 {
                return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
            }
            var stringLen uint64
            for shift := uint(0); ; shift += 7 {
                if shift >= 64 {
                    return ErrIntOverflowTestdata
                }
                if iNdEx >= l {
                    return io.ErrUnexpectedEOF
                }
                b := dAtA[iNdEx]
                iNdEx++
                stringLen |= uint64(b&0x7F) << shift
                if b < 0x80 {
                    break
                }
            }
            intStringLen := int(stringLen)
            if intStringLen < 0 {
                return ErrInvalidLengthTestdata
            }
            postIndex := iNdEx + intStringLen
            if postIndex < 0 {
                return ErrInvalidLengthTestdata
            }
            if postIndex > l {
                return io.ErrUnexpectedEOF
            }
            m.Id = string(dAtA[iNdEx:postIndex])
            iNdEx = postIndex
        case 2:
            if wireType != 2 {
                return fmt.Errorf("proto: wrong wireType = %d for field ProductID", wireType)
            }
            var stringLen uint64
            for shift := uint(0); ; shift += 7 {
                if shift >= 64 {
                    return ErrIntOverflowTestdata
                }
                if iNdEx >= l {
                    return io.ErrUnexpectedEOF
                }
                b := dAtA[iNdEx]
                iNdEx++
                stringLen |= uint64(b&0x7F) << shift
                if b < 0x80 {
                    break
                }
            }
            intStringLen := int(stringLen)
            if intStringLen < 0 {
                return ErrInvalidLengthTestdata
            }
            postIndex := iNdEx + intStringLen
            if postIndex < 0 {
                return ErrInvalidLengthTestdata
            }
            if postIndex > l {
                return io.ErrUnexpectedEOF
            }
            m.ProductID = string(dAtA[iNdEx:postIndex])
            iNdEx = postIndex
        case 3:
            if wireType != 0 {
                return fmt.Errorf("proto: wrong wireType = %d for field Qty", wireType)
            }
            m.Qty = 0
            for shift := uint(0); ; shift += 7 {
                if shift >= 64 {
                    return ErrIntOverflowTestdata
                }
                if iNdEx >= l {
                    return io.ErrUnexpectedEOF
                }
                b := dAtA[iNdEx]
                iNdEx++
                m.Qty |= int32(b&0x7F) << shift
                if b < 0x80 {
                    break
                }
            }
        default:
            iNdEx = preIndex
            skippy, err := skipTestdata(dAtA[iNdEx:])
            if err != nil {
                return err
            }
            if skippy < 0 {
                return ErrInvalidLengthTestdata
            }
            if (iNdEx + skippy) < 0 {
                return ErrInvalidLengthTestdata
            }
            if (iNdEx + skippy) > l {
                return io.ErrUnexpectedEOF
            }
            m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
            iNdEx += skippy
        }
    }

    if iNdEx > l {
        return io.ErrUnexpectedEOF
    }
    return nil
}
func (m *StockItemRemoved) Unmarshal(dAtA []byte) error {
    l := len(dAtA)
    iNdEx := 0
    for iNdEx < l {
        preIndex := iNdEx
        var wire uint64
        for shift := uint(0); ; shift += 7 {
            if shift >= 64 {
                return ErrIntOverflowTestdata
            }
            if iNdEx >= l {
                return io.ErrUnexpectedEOF
            }
            b := dAtA[iNdEx]
            iNdEx++
            wire |= uint64(b&0x7F) << shift
            if b < 0x80 {
                break
            }
        }
        fieldNum := int32(wire >> 3)
        wireType := int(wire & 0x7)
        if wireType == 4 {
            return fmt.Errorf("proto: StockItemRemoved: wiretype end group for non-group")
        }
        if fieldNum <= 0 {
            return fmt.Errorf("proto: StockItemRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
        }
        switch fieldNum {
        case 1:
            if wireType != 2 {
                return fmt.Errorf("proto: wrong wireType = %d for field ProductID", wireType)
            }
            var stringLen uint64
            for shift := uint(0); ; shift += 7 {
                if shift >= 64 {
                    return ErrIntOverflowTestdata
                }
                if iNdEx >= l {
                    return io.ErrUnexpectedEOF
                }
                b := dAtA[iNdEx]
                iNdEx++
                stringLen |= uint64(b&0x7F) << shift
                if b < 0x80 {
                    break
                }
            }
            intStringLen := int(stringLen)
            if intStringLen < 0 {
                return ErrInvalidLengthTestdata
            }
            postIndex := iNdEx + intStringLen
            if postIndex < 0 {
                return ErrInvalidLengthTestdata
            }
            if postIndex > l {
                return io.ErrUnexpectedEOF
            }
            m.ProductID = string(dAtA[iNdEx:postIndex])
            iNdEx = postIndex
        case 2:
            if wireType != 0 {
                return fmt.Errorf("proto: wrong wireType = %d for field RemovedAt", wireType)
            }
            m.RemovedAt = 0
            for shift := uint(0); ; shift += 7 {
                if shift >= 64 {
                    return ErrIntOverflowTestdata
                }
                if iNdEx >= l {
                    return io.ErrUnexpectedEOF
                }
                b := dAtA[iNdEx]
                iNdEx++
                m.RemovedAt |= int64(b&0x7F) << shift
                if b < 0x80 {
                    break
                }
            }
        default:
            iNdEx = preIndex
            skippy, err := skipTestdata(dAtA[iNdEx:])
            if err != nil {
                return err
            }
            if skippy < 0 {
                return ErrInvalidLengthTestdata
            }
            if (iNdEx + skippy) < 0 {
                return ErrInvalidLengthTestdata
            }
            if (iNdEx + skippy) > l {
                return io.ErrUnexpectedEOF
            }
            m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
            iNdEx += skippy
        }
    }

    if iNdEx > l {
        return io.ErrUnexpectedEOF
    }
    return nil
}
func (m *StockItemUpdated) Unmarshal(dAtA []byte) error {
    l := len(dAtA)
    iNdEx := 0
    for iNdEx < l {
        preIndex := iNdEx
        var wire uint64
        for shift := uint(0); ; shift += 7 {
            if shift >= 64 {
                return ErrIntOverflowTestdata
            }
            if iNdEx >= l {
                return io.ErrUnexpectedEOF
            }
            b := dAtA[iNdEx]
            iNdEx++
            wire |= uint64(b&0x7F) << shift
            if b < 0x80 {
                break
            }
        }
        fieldNum := int32(wire >> 3)
        wireType := int(wire & 0x7)
        if wireType == 4 {
            return fmt.Errorf("proto: StockItemUpdated: wiretype end group for non-group")
        }
        if fieldNum <= 0 {
            return fmt.Errorf("proto: StockItemUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
        }
        switch fieldNum {
        case 1:
            if wireType != 2 {
                return fmt.Errorf("proto: wrong wireType = %d for field ProductID", wireType)
            }
            var stringLen uint64
            for shift := uint(0); ; shift += 7 {
                if shift >= 64 {
                    return ErrIntOverflowTestdata
                }
                if iNdEx >= l {
                    return io.ErrUnexpectedEOF
                }
                b := dAtA[iNdEx]
                iNdEx++
                stringLen |= uint64(b&0x7F) << shift
                if b < 0x80 {
                    break
                }
            }
            intStringLen := int(stringLen)
            if intStringLen < 0 {
                return ErrInvalidLengthTestdata
            }
            postIndex := iNdEx + intStringLen
            if postIndex < 0 {
                return ErrInvalidLengthTestdata
            }
            if postIndex > l {
                return io.ErrUnexpectedEOF
            }
            m.ProductID = string(dAtA[iNdEx:postIndex])
            iNdEx = postIndex
        case 2:
            if wireType != 0 {
                return fmt.Errorf("proto: wrong wireType = %d for field Qty", wireType)
            }
            m.Qty = 0
            for shift := uint(0); ; shift += 7 {
                if shift >= 64 {
                    return ErrIntOverflowTestdata
                }
                if iNdEx >= l {
                    return io.ErrUnexpectedEOF
                }
                b := dAtA[iNdEx]
                iNdEx++
                m.Qty |= int32(b&0x7F) << shift
                if b < 0x80 {
                    break
                }
            }
        default:
            iNdEx = preIndex
            skippy, err := skipTestdata(dAtA[iNdEx:])
            if err != nil {
                return err
            }
            if skippy < 0 {
                return ErrInvalidLengthTestdata
            }
            if (iNdEx + skippy) < 0 {
                return ErrInvalidLengthTestdata
            }
            if (iNdEx + skippy) > l {
                return io.ErrUnexpectedEOF
            }
            m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
            iNdEx += skippy
        }
    }

    if iNdEx > l {
        return io.ErrUnexpectedEOF
    }
    return nil
}
func (m *StockItemUpdated2) Unmarshal(dAtA []byte) error {
    l := len(dAtA)
    iNdEx := 0
    for iNdEx < l {
        preIndex := iNdEx
        var wire uint64
        for shift := uint(0); ; shift += 7 {
            if shift >= 64 {
                return ErrIntOverflowTestdata
            }
            if iNdEx >= l {
                return io.ErrUnexpectedEOF
            }
            b := dAtA[iNdEx]
            iNdEx++
            wire |= uint64(b&0x7F) << shift
            if b < 0x80 {
                break
            }
        }
        fieldNum := int32(wire >> 3)
        wireType := int(wire & 0x7)
        if wireType == 4 {
            return fmt.Errorf("proto: StockItemUpdated2: wiretype end group for non-group")
        }
        if fieldNum <= 0 {
            return fmt.Errorf("proto: StockItemUpdated2: illegal tag %d (wire type %d)", fieldNum, wire)
        }
        switch fieldNum {
        case 1:
            if wireType != 0 {
                return fmt.Errorf("proto: wrong wireType = %d for field Qty", wireType)
            }
            m.Qty = 0
            for shift := uint(0); ; shift += 7 {
                if shift >= 64 {
                    return ErrIntOverflowTestdata
                }
                if iNdEx >= l {
                    return io.ErrUnexpectedEOF
                }
                b := dAtA[iNdEx]
                iNdEx++
                m.Qty |= int32(b&0x7F) << shift
                if b < 0x80 {
                    break
                }
            }
        default:
            iNdEx = preIndex
            skippy, err := skipTestdata(dAtA[iNdEx:])
            if err != nil {
                return err
            }
            if skippy < 0 {
                return ErrInvalidLengthTestdata
            }
            if (iNdEx + skippy) < 0 {
                return ErrInvalidLengthTestdata
            }
            if (iNdEx + skippy) > l {
                return io.ErrUnexpectedEOF
            }
            m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
            iNdEx += skippy
        }
    }

    if iNdEx > l {
        return io.ErrUnexpectedEOF
    }
    return nil
}
func skipTestdata(dAtA []byte) (n int, err error) {
    l := len(dAtA)
    iNdEx := 0
    for iNdEx < l {
        var wire uint64
        for shift := uint(0); ; shift += 7 {
            if shift >= 64 {
                return 0, ErrIntOverflowTestdata
            }
            if iNdEx >= l {
                return 0, io.ErrUnexpectedEOF
            }
            b := dAtA[iNdEx]
            iNdEx++
            wire |= (uint64(b) & 0x7F) << shift
            if b < 0x80 {
                break
            }
        }
        wireType := int(wire & 0x7)
        switch wireType {
        case 0:
            for shift := uint(0); ; shift += 7 {
                if shift >= 64 {
                    return 0, ErrIntOverflowTestdata
                }
                if iNdEx >= l {
                    return 0, io.ErrUnexpectedEOF
                }
                iNdEx++
                if dAtA[iNdEx-1] < 0x80 {
                    break
                }
            }
            return iNdEx, nil
        case 1:
            iNdEx += 8
            return iNdEx, nil
        case 2:
            var length int
            for shift := uint(0); ; shift += 7 {
                if shift >= 64 {
                    return 0, ErrIntOverflowTestdata
                }
                if iNdEx >= l {
                    return 0, io.ErrUnexpectedEOF
                }
                b := dAtA[iNdEx]
                iNdEx++
                length |= (int(b) & 0x7F) << shift
                if b < 0x80 {
                    break
                }
            }
            if length < 0 {
                return 0, ErrInvalidLengthTestdata
            }
            iNdEx += length
            if iNdEx < 0 {
                return 0, ErrInvalidLengthTestdata
            }
            return iNdEx, nil
        case 3:
            for {
                var innerWire uint64
                var start int = iNdEx
                for shift := uint(0); ; shift += 7 {
                    if shift >= 64 {
                        return 0, ErrIntOverflowTestdata
                    }
                    if iNdEx >= l {
                        return 0, io.ErrUnexpectedEOF
                    }
                    b := dAtA[iNdEx]
                    iNdEx++
                    innerWire |= (uint64(b) & 0x7F) << shift
                    if b < 0x80 {
                        break
                    }
                }
                innerWireType := int(innerWire & 0x7)
                if innerWireType == 4 {
                    break
                }
                next, err := skipTestdata(dAtA[start:])
                if err != nil {
                    return 0, err
                }
                iNdEx = start + next
                if iNdEx < 0 {
                    return 0, ErrInvalidLengthTestdata
                }
            }
            return iNdEx, nil
        case 4:
            return iNdEx, nil
        case 5:
            iNdEx += 4
            return iNdEx, nil
        default:
            return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
        }
    }
    panic("unreachable")
}

var (
    ErrInvalidLengthTestdata = fmt.Errorf("proto: negative length found during unmarshaling")
    ErrIntOverflowTestdata   = fmt.Errorf("proto: integer overflow")
)
