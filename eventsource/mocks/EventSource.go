// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import ddd "github.com/onedaycat/zamus/ddd"
import errors "github.com/onedaycat/errors"
import event "github.com/onedaycat/zamus/event"

import mock "github.com/stretchr/testify/mock"
import proto "github.com/gogo/protobuf/proto"

// EventSource is an autogenerated mock type for the EventSource type
type EventSource struct {
	mock.Mock
}

// GetAggregate provides a mock function with given fields: ctx, aggID, agg
func (_m *EventSource) GetAggregate(ctx context.Context, aggID string, agg ddd.AggregateRoot) errors.Error {
	ret := _m.Called(ctx, aggID, agg)

	var r0 errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, string, ddd.AggregateRoot) errors.Error); ok {
		r0 = rf(ctx, aggID, agg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.Error)
		}
	}

	return r0
}

// GetAggregateBySeq provides a mock function with given fields: ctx, aggID, agg, seq
func (_m *EventSource) GetAggregateBySeq(ctx context.Context, aggID string, agg ddd.AggregateRoot, seq int64) errors.Error {
	ret := _m.Called(ctx, aggID, agg, seq)

	var r0 errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, string, ddd.AggregateRoot, int64) errors.Error); ok {
		r0 = rf(ctx, aggID, agg, seq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.Error)
		}
	}

	return r0
}

// GetEvents provides a mock function with given fields: ctx, aggID, seq
func (_m *EventSource) GetEvents(ctx context.Context, aggID string, seq int64) ([]*event.Msg, errors.Error) {
	ret := _m.Called(ctx, aggID, seq)

	var r0 []*event.Msg
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) []*event.Msg); ok {
		r0 = rf(ctx, aggID, seq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*event.Msg)
		}
	}

	var r1 errors.Error
	if rf, ok := ret.Get(1).(func(context.Context, string, int64) errors.Error); ok {
		r1 = rf(ctx, aggID, seq)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.Error)
		}
	}

	return r0, r1
}

// PublishEvents provides a mock function with given fields: ctx, evts
func (_m *EventSource) PublishEvents(ctx context.Context, evts ...proto.Message) errors.Error {
	_va := make([]interface{}, len(evts))
	for _i := range evts {
		_va[_i] = evts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, ...proto.Message) errors.Error); ok {
		r0 = rf(ctx, evts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.Error)
		}
	}

	return r0
}

// PublishEventsWithMetadata provides a mock function with given fields: ctx, metadata, evts
func (_m *EventSource) PublishEventsWithMetadata(ctx context.Context, metadata map[string]string, evts ...proto.Message) errors.Error {
	_va := make([]interface{}, len(evts))
	for _i := range evts {
		_va[_i] = evts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, metadata)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, ...proto.Message) errors.Error); ok {
		r0 = rf(ctx, metadata, evts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.Error)
		}
	}

	return r0
}

// Save provides a mock function with given fields: ctx, agg
func (_m *EventSource) Save(ctx context.Context, agg ddd.AggregateRoot) errors.Error {
	ret := _m.Called(ctx, agg)

	var r0 errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, ddd.AggregateRoot) errors.Error); ok {
		r0 = rf(ctx, agg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.Error)
		}
	}

	return r0
}

// SaveWithMetadata provides a mock function with given fields: ctx, agg, metadata
func (_m *EventSource) SaveWithMetadata(ctx context.Context, agg ddd.AggregateRoot, metadata map[string]string) errors.Error {
	ret := _m.Called(ctx, agg, metadata)

	var r0 errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, ddd.AggregateRoot, map[string]string) errors.Error); ok {
		r0 = rf(ctx, agg, metadata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.Error)
		}
	}

	return r0
}
