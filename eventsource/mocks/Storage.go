// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import errors "github.com/onedaycat/errors"
import event "github.com/onedaycat/zamus/event"
import eventsource "github.com/onedaycat/zamus/eventsource"
import mock "github.com/stretchr/testify/mock"

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// GetEvents provides a mock function with given fields: ctx, aggID, seq
func (_m *Storage) GetEvents(ctx context.Context, aggID string, seq int64) ([]*event.Msg, errors.Error) {
	ret := _m.Called(ctx, aggID, seq)

	var r0 []*event.Msg
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) []*event.Msg); ok {
		r0 = rf(ctx, aggID, seq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*event.Msg)
		}
	}

	var r1 errors.Error
	if rf, ok := ret.Get(1).(func(context.Context, string, int64) errors.Error); ok {
		r1 = rf(ctx, aggID, seq)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.Error)
		}
	}

	return r0, r1
}

// GetSnapshot provides a mock function with given fields: ctx, aggID, version
func (_m *Storage) GetSnapshot(ctx context.Context, aggID string, version int) (*eventsource.Snapshot, errors.Error) {
	ret := _m.Called(ctx, aggID, version)

	var r0 *eventsource.Snapshot
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *eventsource.Snapshot); ok {
		r0 = rf(ctx, aggID, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventsource.Snapshot)
		}
	}

	var r1 errors.Error
	if rf, ok := ret.Get(1).(func(context.Context, string, int) errors.Error); ok {
		r1 = rf(ctx, aggID, version)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.Error)
		}
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, msgs, snapshot
func (_m *Storage) Save(ctx context.Context, msgs []*event.Msg, snapshot *eventsource.Snapshot) errors.Error {
	ret := _m.Called(ctx, msgs, snapshot)

	var r0 errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, []*event.Msg, *eventsource.Snapshot) errors.Error); ok {
		r0 = rf(ctx, msgs, snapshot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.Error)
		}
	}

	return r0
}
