// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import errors "github.com/onedaycat/errors"
import mock "github.com/stretchr/testify/mock"
import sagacmd "github.com/onedaycat/zamus/saga/sagacmd"

// Saga is an autogenerated mock type for the Saga type
type Saga struct {
	mock.Mock
}

// GetData provides a mock function with given fields:
func (_m *Saga) GetData() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetState provides a mock function with given fields:
func (_m *Saga) GetState() *sagacmd.State {
	ret := _m.Called()

	var r0 *sagacmd.State
	if rf, ok := ret.Get(0).(func() *sagacmd.State); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagacmd.State)
		}
	}

	return r0
}

// Start provides a mock function with given fields: ctx, stateName, data
func (_m *Saga) Start(ctx context.Context, stateName string, data interface{}) errors.Error {
	ret := _m.Called(ctx, stateName, data)

	var r0 errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) errors.Error); ok {
		r0 = rf(ctx, stateName, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.Error)
		}
	}

	return r0
}
